#include <iostream>
#include <vector>
#include <immintrin.h> // Nagłówek do SIMD

void dodaj_wektory_simd(const std::vector<int>& wektor1, const std::vector<int>& wektor2, std::vector<int>& wynik) {
    size_t rozmiar = wektor1.size();
    size_t i = 0;

    // Procesowanie wektorów w blokach 4 elementów (dla AVX2)
    for (; i + 4 <= rozmiar; i += 4) {
        __m256i v1 = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(&wektor1[i]));
        __m256i v2 = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(&wektor2[i]));
        __m256i suma = _mm256_add_epi32(v1, v2);
        _mm256_storeu_si256(reinterpret_cast<__m256i*>(&wynik[i]), suma);
    }

    // Pozostałe elementy (jeśli rozmiar nie jest wielokrotnością 4)
    for (; i < rozmiar; ++i) {
        wynik[i] = wektor1[i] + wektor2[i];
    }
}

int main() {
    const size_t N = 1000000;
    std::vector<int> wektor1(N, 1);
    std::vector<int> wektor2(N, 2);
    std::vector<int> wynik(N);

    dodaj_wektory_simd(wektor1, wektor2, wynik);

    // Wydrukuj kilka wyników, by sprawdzić poprawność
    std::cout << "wynik[0] = " << wynik[0] << ", wynik[1] = " << wynik[1] << std::endl;

    return 0;
}
